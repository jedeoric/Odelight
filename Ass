!FIXES YET TO BE DONE...

!2) WARN ON LABEL USAGE WITHIN MACHINE CODE (LDA ;END_EVENT (NO LABEL AT TOP))
!3) WARN WHEN DUPLICATE VARIABLE LABELS ARE FOUND




DIM PATH$[20],FN$[40],RP$[120],E$[10],A$[1],LNE$[120],V$[40],Z$[30]
DIM K$[50],LABEL$[5000],L$[32],MC$[40],MN$[1300],HX$[16],B?[1]
DIM ES$[4],ZR$[20],OUT_FILE$[20],DH$[4]
dim %1,G
DIM %3,V
ZR$="0"+ZR$
!SETUP ROUTINES
DECLARE SUB SETUP_MNEMONICS,SETUP_CHANNELS
!TABLE ROUTINES
DECLARE SUB PADDED_TABLE,STRING_TABLE,ROUTINE_TABLE,COMPACT_TABLE
DECLARE SUB MIXED_TABLE,POPHR_TABLE,POPLR_TABLE
!CONVERSION ROUTINES
DECLARE SUB DEC_HEX,HEX_DEC,ANY_BASE,EVAL_SWITCH
!FILTER ROUTINES
DECLARE SUB STRIP_REMS,TILL_CHANGE,STRIP_TABS
!DECISION ROUTINES
DECLARE SUB POSSIBLE_MC,EVAL_VARIABLE
!MC MODE ROUTINES
DECLARE SUB IS_RELATIVE,IS_INDIRECTX,IS_INDIRECTY,IS_ADDRX,IS_ADDRY
DECLARE SUB IS_INDIRECT,IS_IMMEDIATE,IS_IMPLIED,IS_ADDRESS
!LABEL ROUTINES
DECLARE SUB ROUTINE_LABEL,FIND_LABEL
!OTHER ROUTINES
DECLARE SUB RER,POKE_VALUE,ADD_KEY,EXTERNAL_LOAD

MEMORY_LO=65536
MEMORY_HI=0
ER=0 \ HX$="0123456789ABCDEF"
CALL SETUP_CHANNELS()
CALL SETUP_MNEMONICS()
LN=0
IF ER=0
	PRINT "READING PROJECT"
  DO
  	INPUT #1;LNE$
		LN=LN+1
		RP$=LNE$
 	 	CALL STRIP_REMS()
		LNE$=LTRIM$(RTRIM$(UCASE$(LNE$)))
		P=POS(LNE$,="@")
		IF P
			V$=LNE$[P+1]
			CALL HEX_DEC()
			IF ER=1
				PRINT "CANNOT EVALUATE START ADDRESS FOR LINE ";LN
			ELSE
				MEM=V
				IF MEM<MEMORY_LO
					MEMORY_LO=MEM
				END IF
				LNE$=LNE$[1,P-1]
				P=POS(LNE$,="OUT=")
				IF P
					RP$=RTRIM$(LNE$[P+5])
					OUT_FILE$=RP$[1,LEN(RP$)-1]
					LNE$=LNE$[1,P-1]
					P=POS(LNE$,="IN=")
					IF P
						RP$=RTRIM$(LNE$[P+4])
						FN$=RP$[1,LEN(RP$)-1]
					ELSE
						PRINT "INPUT FILENAME NOT SPECIFIED IN LINE ";LN
						ER=1
					END IF
				ELSE
					PRINT "CANNOT FIND OUTPUT FILENAME IN LINE ";LN
					ER=1
				END IF
			END IF
		ELSE
REM			PRINT "CANNOT FIND START ADDRESS IN LINE ";LN;", ASSUMING CONTINUATION FROM LAST."
		END IF
! 	 	SELECT CASE LNE$[1,5]
! 	 		CASE "START"                 \!START LOCATION
!				P=POS(LNE$,="=")
!				IF P=0
!					PRINT "YOU MUST USE EQUALS SIGN TO SEGREGATE START"
!					ER=1
!				ELSE
!					V$=LNE$[P+1]
!					E$=V$
! 	 				CALL HEX_DEC()
! 	 				MEM=V
!        	IF MEM<MEMORY_LO
!						MEMORY_LO=MEM
!					END IF
!					PRINT "FOUND START @";E$
!				END IF
!      CASE "PROJE"                 \! QUOTE SYMBOL
!				P=POS(LNE$,="\42\")
!        IF P=0
!					PRINT "YOU MUST ENCLOSE THE PROJECT FILENAME IN QUOTES"
!					ER=1
!				ELSE
!					L=LEN(LNE$)
!					FN$=LNE$[P+1,L-1]
!  				PRINT "FOUND PROJECT NAME \42\";FN$;"\42\"
!				END IF
!			CASE "TAPFI"                 \!FINAL TAP FILE
!				P=POS(LNE$,="\42\")
!				IF P=0
!					PRINT "YOU MUST ENCLOSE THE TAPFILE IN QUOTES"
!					ER=1
!				ELSE
!					L=LEN(LNE$)
!					OUT_FILE$=LNE$[P+1,L-1]
!				END IF
! 	 	END SELECT
	LOOP UNTIL UCASE$(lne$[1,4])="~END" OR ER=1
	IF ER=1
		END
	END IF
ELSE
	END
END IF
CLOSE #1
PRINT "BUILDING MEMORY.64K FILE..."
BUILD #3,"[128:512] MEMORY.64K!" AS "Raw Regular File"
V=255
FOR A=0 TO 65535
	V=0
	CONV 1,B?,V
	BR=INT(A/1024)
	BO=A-(BR*1024)
	WRITE #3,BR,BO;B?
NEXT A
TRY
	OPEN #1,FN$
	PRINT "OPENING PROJECT \42\";FN$;"\42\"
ELSE
	PRINT "PROJECT \42\";FN$;"\42\ NOT FOUND!!"
	END
END TRY
! #1 SOURCE FILE
! #3 direct poke memory file
PRINT "FIRST PASS..." \!First Pass: Compile list of labels
LN=0
DO
	INPUT #1;LNE$
	LN=LN+1
	CALL STRIP_REMS()
	CALL STRIP_TABS()
	IF LNE$<>""
		SELECT CASE LNE$[1,1]
			CASE "&"
				CALL TILL_CHANGE()
				CALL ADD_KEY()
			CASE ":"
				CALL TILL_CHANGE()
				CALL ADD_KEY()
			CASE ";"
				CALL TILL_CHANGE()
				CALL ADD_KEY()
			CASE "@"
				CALL TILL_CHANGE()
 	 			V$=LNE$[2]
 	 			CALL ANY_BASE()
				E$=V$
 	 			CALL HEX_DEC()
 	 			MEM=V
        IF MEM<MEMORY_LO
					MEMORY_LO=MEM
				END IF
				PRINT "FOUND NEW START @";E$
		END SELECT
	END IF
LOOP UNTIL UCASE$(LNE$[1,4])="~END"
IF ER=1
	PRINT "OOPS, ERROR OCCURED!"
	PRINT "LN:";LN
	PRINT "LNE:";LNE$
	PRINT "RP:";RP$
	CLOSE
	END
END IF
REWIND #1
PRINT "SECOND PASS..." \! Second Pass: Populate memory
NL=LN
LN=0
DO
	INPUT #1;LNE$
	LN=LN+1
	CALL STRIP_REMS()
	CALL STRIP_TABS()
	LNE$=LTRIM$(RTRIM$(UCASE$(LNE$)))
	IF LNE$<>""
 	 	SELECT CASE LNE$[1,1]
 	 		CASE ":"                     \!TABLE LABEL
 	 			V$=LNE$
 	 			CALL FIND_LABEL()
 	 			IF MEM<256
 	 				Q=P
 	 				V=MEM
 	 				CALL DEC_HEX()
 	 				LABEL$[Q-5,Q-5]="Z"
 	 				LABEL$[Q-4,Q-1]="00"+V$[1,2]
 	 			ELSE
 	 				V=MEM
 	 				CALL DEC_HEX()
 	 				LABEL$[P-4,P-1]=V$[1,4]
 	 				LABEL$[P-5,P-5]="A"
 	 			END IF
 	 		CASE "["                     \!TABLE
 	 			SELECT CASE LNE$[2,2]
 	 				CASE "#"                 \!PADDED TABLE
 	 					CALL PADDED_TABLE()
 	 				CASE "\42\"							 \!STRING TABLE
 	 					CALL STRING_TABLE()
 	 				CASE "H"                 \!ROUTINE TABLE HI (DEALT IN 3RD PASS)
 	 					CALL ROUTINE_TABLE()
 	 				CASE "L"                 \!ROUTINE TABLE LO (DEALT IN 3RD PASS)
 	 					CALL ROUTINE_TABLE()
					CASE "%"
						ER=1
						PRINT "YOU MUST USE < > FOR MIXED TABLES IN LINE ";LN
					CASE "$"
						ER=1
						PRINT "YOU MUST USE < > FOR MIXED TABLES IN LINE ";LN
 	 				CASE ELSE								 \!COMPACTED TABLE
						IF POS(LNE$,=",")
							ER=1
							PRINT "YOU MUST USE < > FOR MIXED TABLES IN LINE ";LN
						ELSE
							CALL COMPACT_TABLE()
						END IF
 	 			END SELECT
 	 		CASE "<"
 	 			CALL MIXED_TABLE()
 	 		CASE ";"                     \!VARIABLE LABEL
 	 			CALL EVAL_VARIABLE()
 	 		CASE "&"
 	 			CALL ROUTINE_LABEL()
 	 		CASE "@"
 	 			REM IGNORE
			CASE "~"
				REM IGNORE
			CASE "!"
				CALL EXTERNAL_LOAD()
 	 		CASE ELSE
 	 			MC$=LTRIM$(UCASE$(LNE$))
 	 			CALL POSSIBLE_MC()
 	 	END SELECT
	END IF
LOOP UNTIL UCASE$(LNE$[1,4])="~END" OR ER=1
IF ER=1
	PRINT "OOPS, ERROR OCCURED!"
	PRINT "LN:";LN
	PRINT "LNE:";LNE$
	PRINT "RP:";RP$
	END
END IF
PRINT 'BK';"THIRD PASS..." ! 1) POPULATE ROUTINE POINTER TABLES
REWIND #1
LN=0 \ CLEAR RP$
DO
	INPUT #1;LNE$
	LN=LN+1
!	PRINT LN;",";
	CALL STRIP_REMS()
	CALL STRIP_TABS()
	LNE$=LTRIM$(RTRIM$(UCASE$(LNE$)))
	IF LNE$<>""
    SELECT CASE LNE$[1,2]
      CASE "[H"
				CALL POPHR_TABLE()
			CASE "[L"
				CALL POPLR_TABLE()
		END SELECT
		IF LNE$[1,1]=":"
			RP$=LNE$
	    P=POS(LABEL$,=RP$)
      IF P=0
				PRINT "TABLE \42\";RP$;"\42\ NOT FOUND IN LINE ";LN
				ER=1
			ELSE
				V$=LABEL$[P-4,P-1]
				CALL HEX_DEC()
				LOC=V
			END IF
		END IF
	END IF
LOOP UNTIL LNE$[1,4]="~END" OR ER=1
IF ER=1
	PRINT "OOPS, ERROR OCCURED!"
	PRINT "LN:";LN
	PRINT "LNE:";LNE$
	PRINT "RP:";RP$
	CLOSE
	END
END IF
! 2) PROCESS ANY "/" (BRANCHES) IN LABELS
DO
	S=POS(LABEL$,="/")
	P=S
	IF S>0
		IF LABEL$[S+5,S+5]<>"&"
			PRINT "THE LABEL THAT WAS BRANCHED TO WAS NOT A ROUTINE!!"
			ER=1
		ELSE
	 	 	X=POS(LABEL$[S],="~")
	 	 	IF X=0
	 	 		PRINT "ERROR IN STRING!!"
	 	 		ER=1
	 	 	ELSE
	      L$=LABEL$[P+5,S+X-2]
	 	 		S1=S+X-1
	 	 		DO
   	 			X=POS(LABEL$,=L$)
	 	 			IF X=0
	 	 				PRINT "LABEL NOT FOUND"
	 	 				ER=1
	 	 			ELSE IF LABEL$[X-5,X-5]<>"/"
	 	 				ED=1
	 	 				V$=LABEL$[X-4,X-1]
	 	 				CALL HEX_DEC()
	 	 				GO2=V
	 	 				V$=LABEL$[P+1,P+4]
	 	 				CALL HEX_DEC()
	 	 				GOFROM=V
	 	 				IF ABS(GOFROM-GO2)>127
	 	 					PRINT "BRANCH SPAN FOR THREAD \42\";L$;"\42\ TOO GREAT (";ABS(GOFROM-GO2);")!!"
	 	 					ER=1
	 	 				ELSE
 	            IF GO2-GOFROM>0   \!BRANCH FORWARD
  	 	 		 				V=ABS(GO2-GOFROM)-1
 	  		 		 			CONV 1,B?,V
 	  		 		 			BR=INT((GOFROM)/1024)
 	  		 		 			BO=(GOFROM)-(BR*1024)
    	 	 		 			WRITE #3,BR,BO;B?
	    				ELSE                   \!BRANCH BACK
 	  							V=254-(GO2-GOFROM)
	  			 	 			CONV 1,B?,V
	  			 	 			BR=INT((GOFROM+1)/1024)
	  			 	 			BO=(GOFROM+1)-(BR*1024)
	  			 	 			WRITE #3,BR,BO;B?
	 	 					END IF
	 	 				END IF
	 	 			END IF
	 	 		LOOP UNTIL ED=1 OR ER=1
	 	 		LABEL$[S,S1]=""
	 	 	END IF
		END IF
	END IF
LOOP UNTIL S=0 OR ER=1
IF ER=1
	PRINT "OOPS, ERROR OCCURED!"
	PRINT "LN:";LN
	PRINT "LNE:";LNE$
	PRINT "RP:";RP$
	CLOSE
	END
END IF
DO
	F=POS(LABEL$,="^")
	IF F>0
		X=POS(LABEL$[F],="~")
		L$=LABEL$[F+5,F+X-2]
		V$=LABEL$[F+1,F+4]
		CALL HEX_DEC()
		PK=V
		AD=VAL(L$[1,1])
		L$[1,1]="&"
		LABEL$[F,F]="D"
		P=POS(LABEL$,=L$)
		IF P=0
			PRINT "ROUTINE NOT FOUND!!"
		ELSE
			IF LABEL$[P-5,P-5]="-"
				PRINT "LABEL NEVER DEFINED!!"
			ELSE
				V$=LABEL$[P-4,P-1]
				CALL HEX_DEC()
				V=V+AD
				CALL DEC_HEX()
				Z$=V$
				V$=Z$[3,4]
				CALL HEX_DEC()
	 			CONV 1,B?,V
	 			BR=INT((PK)/1024)
	 			BO=(PK)-(BR*1024)
	 			WRITE #3,BR,BO;B?
				V$=Z$[1,2]
				CALL HEX_DEC()
	 			CONV 1,B?,V
	 			BR=INT((PK+1)/1024)
	 			BO=(PK+1)-(BR*1024)
	 			WRITE #3,BR,BO;B?
			END IF
		END IF
	ENDIF
LOOP UNTIL ER=1 OR F=0
IF ER=1
	PRINT "PASSES UNSUCCESSFUL!!"
	CLOSE
	END
END IF
PRINT "PASSES SUCCESSFUL"
PRINT "BUILDING \42\";OUT_FILE$;"\42\"
!HEADER CONSISTS OF THESE BYTES
!#16,#16,#16,#24,#ff,#ff,#80,#00,HE,LE,HS,LS,0,0
V=MEMORY_LO
CALL DEC_HEX()
L$=V$
V=MEMORY_HI
CALL DEC_HEX()
PRINT "MEMORY RANGE: #";L$;" - #";V$;" (";MEMORY_HI-MEMORY_LO;")"
LNE$="16161624FFFF8000"+V$[1,4]+L$[1,4]+"0000"
V$="["+STR$(INT(((MEMORY_HI-MEMORY_LO)+18)/512)+1)+":512] "+OUT_FILE$+"!"
BUILD #2,V$ AS "Raw Regular File"
PRINT "ADDING TAPE HEADER"
FOR A=0 TO 13
  V$=LNE$[1+(A*2),2+(A*2)]
  CALL HEX_DEC()
	CONV 1,B?,V
	BR=INT(A/1024)
	BO=A-(BR*1024)
	WRITE #2,BR,BO;B?
NEXT A
PRINT "TRANSFERRING CODE & DATA"
MEM=MEMORY_LO
FOR A=14 TO ((MEMORY_HI-MEMORY_LO)+13)
	BR=INT(MEM/1024)
	BO=MEM-(BR*1024)
	MEM=MEM+1
	READ #3,BR,BO;B?
	BR=INT(A/1024)
	BO=A-(BR*1024)
	WRITE #2,BR,BO;B?
NEXT A
PRINT "CLOSING FILES"
PRINT "WASTED ";WASTED;" BYTES."
CLOSE
PRINT "PRESS SPACE TO CONTINUE";
INPUT (-1,C)""E$
PRINT TAB(14);"PO_ LIST"
A=0
P=1
LN=17
DO
	IF LABEL$[P,P+3]="&PO_"
		X=POS(LABEL$[P],="~")
		PRINT LABEL$[P,P+X-2];TAB(20);" - ";TAB(30);"#";LABEL$[P-4,P-1]
		LN=LN+1
		IF LN
			LN=0
			PRINT TAB(12);"PRESS SPACE TO CONTINUE";
			INPUT (-1,C)""E$
			PRINT 'BK CL';
		END IF
	END IF
P=P+1
LOOP UNTIL P=LEN(LABEL$)
PRINT TAB(12);"ROUTINE TABLE"
A=0
P=1
LN=0
DO
	IF LABEL$[P,P]="&" AND LABEL$[P+1,P+3]<>"PO_"
		X=POS(LABEL$[P],="~")
		PRINT LABEL$[P,P+X-2];TAB(20);" - ";TAB(30);"#";LABEL$[P-4,P-1]
		LN=LN+1
		IF LN=23
			LN=0
			PRINT TAB(12);"PRESS SPACE TO CONTINUE";
			INPUT (-1,C)""E$
			PRINT 'BK CL';
		END IF
	END IF
P=P+1
LOOP UNTIL P=LEN(LABEL$)
PRINT
IF POS(LABEL$,=":")
  PRINT TAB(8);"TABLES WITHIN CODE"
	P=1
	DO
		IF LABEL$[P,P]=":"
			X=POS(LABEL$[P],="~")
			PRINT LABEL$[P,P+X-2];TAB(20);" - ";TAB(30);"#";LABEL$[P-4,P-1]
			LN=LN+1
			IF LN=23
				LN=0
				PRINT TAB(12);"PRESS SPACE TO CONTINUE";
				INPUT (-1,C)""E$
				PRINT 'BK CL';
			END IF
		END IF
	P=P+1
	LOOP UNTIL P=LEN(LABEL$)
END IF
PRINT
IF POS(LABEL$,=";")
  PRINT TAB(8);"VARIABLES WITHIN CODE"
	P=1
	DO
		IF LABEL$[P,P]=";"
			X=POS(LABEL$[P],="~")
			PRINT LABEL$[P,P+X-2];TAB(20);" - ";TAB(30);"#";LABEL$[P-4,P-1]
			LN=LN+1
			IF LN=23
				LN=0
				PRINT TAB(12);"PRESS SPACE TO CONTINUE";
				INPUT (-1,C)""E$
				PRINT 'BK CL';
			END IF
		END IF
	P=P+1
	LOOP UNTIL P=LEN(LABEL$)
END IF

END

SUB EXTERNAL_LOAD()
LNE$=LNE$[2]
P=POS(LNE$,=" ")
IF P=0
	PRINT "YOU MUST SPECIFY A FILE IN LINE ";LN
	ER=1
ELSE
	K$=LNE$[1,P-1]
	P=POS(LNE$,="/")
	IF P>0            \!FILE-TYPE SPECIFIED
		IF LNE$[P+1,P+3]="RAW"
			RP$="RAW"
		END IF
	ELSE
		RP$="TEXT"
	END IF
	P=POS(LNE$,="+")
	IF P>0		        \!SET OFS
		L$=LNE$[P+1]
		P=POS(L$,=" ")
		IF P>0
			V$=L$[1,P-1]
			CALL ANY_BASE()
			CALL HEX_DEC()
			OS=V
		END IF
	ELSE
		OS=0
	END IF
	P=POS(LNE$,="[")
	IF P>0            \!SET SIZE
		L$=LNE$[P+1]
		P=POS(L$,="]")
		IF P=0
			PRINT "MUST TERMINATE SWITCH WITH ] CHARACTER IN LINE ";LN
			ER=1
		ELSE
			V$=L$[1,P-1]
			CALL ANY_BASE()
			CALL HEX_DEC()
			SZ=V
		END IF
	END IF
	IF ER=0
		TRY
			OPEN #4,K$
		ELSE
			PRINT "CANNOT OPEN FILE SPECIFIED IN LINE ";LN
			ER=1
		END TRY
		IF ER=0
			B=CHF(404)
			IF SZ+OS>B
				PRINT "THE SIZE SPECIFIED EXCEADS THE FILES LENGTH IN LINE ";LN
				ER=1
			ELSE
 	 			CLOSE #4
 	 			L$="[0:"+STR$(B)+"] "+K$
 	 			TRY
 	 				OPEN #4,K$ AS RP$
 	 			ELSE
 	 				PRINT "CANNOT OPEN FILE AS ";K$;" IN LINE ";LN
 	 				ER=1
 	 			END TRY
 	 			IF ER=0
					SETFP #4,0,OS;
  				VL=MEM+SZ
					DO
						IF RP$="RAW"
							INPUT #4;B?
 	 	 	 	 	 	 	BR=INT(MEM/1024)
 	 	 	 	 	 	 	BO=MEM-(BR*1024)
 	 	 	 	 	 	 	WRITE #3,BR,BO;B?
 	 	 	 	 	 	 	MEM=MEM+1
 	 	 	 	 	 	 	IF MEM>MEMORY_HI
 	 	 	 	 	 	 		MEMORY_HI=MEM
 	 	 	 	 	 	 	END IF
						ELSE
							INPUT #4;V$[1,1]
							V=ASC(V$)
 	 	 	 	 	 	 	CONV 1,B?,V
 	 	 	 	 	 	 	BR=INT(MEM/1024)
 	 	 	 	 	 	 	BO=MEM-(BR*1024)
 	 	 	 	 	 	 	WRITE #3,BR,BO;B?
 	 	 	 	 	 	 	MEM=MEM+1
 	 	 	 	 	 	 	IF MEM>MEMORY_HI
 	 	 	 	 	 	 		MEMORY_HI=MEM
 	 	 	 	 	 	 	END IF
						END IF
					LOOP UNTIL MEM=VL
					CLOSE #4
				END IF
			END IF
		END IF
	END IF
END IF
END SUB

SUB POPHR_TABLE()
L=LEN(LNE$)
LNE$=LNE$[3,L-1]
P=POS(LNE$,=",")
IF P=0
	L$=LNE$+"~"
	P=POS(LABEL$,=L$)
	IF P=0
		PRINT "ROUTINE \42\";L$;"\42\ NOT FOUND IN LINE ";LN
		ER=1
	ELSE
		IF LABEL$[P-5,P-5]="-"
			PRINT "ROUTINE \42\";L$;"\42\ WAS NEVER DEFINED IN LINE ";LN
			ER=1
		ELSE
			V$=LABEL$[P-4,P-3]
			CALL HEX_DEC()
			IF RP$=""
				PRINT "NO TABLE SETUP FOR THIS [H DATA IN LINE ";LN
				ER=1
			ELSE
				A=V
				CONV 1,B?,A
				BR=INT(LOC/1024)
				BO=LOC-(BR*1024)
				WRITE #3,BR,BO;B?
				IF LOC>MEMORY_HI
					MEMORY_HI=LOC
				ELSE IF LOC<MEMORY_LO
					MEMORY_LO=LOC
				END IF
				LOC=LOC+1
			END IF
		END IF
	END IF
ELSE
	IF RP$=""
		PRINT "NO TABLE SETUP FOR THIS [H DATA IN LINE ";LN
		ER=1
	ELSE
	 	DO
      P=POS(LNE$,=",")
			S=P
 	 		IF P=0
 	 			L$=LNE$
 	 		ELSE
 	 			L$=LNE$[1,P-1]
 	 			LNE$=LNE$[P+1]
 	 		END IF
 	 		P=POS(LABEL$,=L$)
 	 		IF P=0
 	 			PRINT "ROUTINE \42\";L$;"\42\ NOT FOUND IN LINE ";LN
 	 			ER=1
 	 		ELSE
 	 			V$=LABEL$[P-4,P-3]
 	 			CALL HEX_DEC()
 				CONV 1,B?,V
 				BR=INT(LOC/1024)
 				BO=LOC-(BR*1024)
 				WRITE #3,BR,BO;B?
 				IF LOC>MEMORY_HI
 	 					MEMORY_HI=LOC
 				ELSE IF LOC<MEMORY_LO
	 					MEMORY_LO=LOC
 				END IF
				LOC=LOC+1
 	 		END IF
 	 	LOOP UNTIL ER=1 OR S=0
	END IF
END IF
END SUB

SUB POPLR_TABLE()
L=LEN(LNE$)
LNE$=LNE$[3,L-1]
P=POS(LNE$,=",")
IF P=0
	L$=LNE$
	P=POS(LABEL$,=L$)
	IF P=0
		PRINT "ROUTINE \42\";L$;"\42\ NOT FOUND IN LINE ";LN
		ER=1
	ELSE
		IF LABEL$[P-5,P-5]="-"
			PRINT "ROUTINE \42\";L$;"\42\ WAS NEVER DEFINED IN LINE ";LN
			ER=1
		ELSE
			V$=LABEL$[P-2,P-1]
			CALL HEX_DEC()
			IF RP$=""
				PRINT "NO TABLE SETUP FOR THIS [L DATA IN LINE ";LN
				ER=1
			ELSE
				A=V
				CONV 1,B?,A
				BR=INT(LOC/1024)
				BO=LOC-(BR*1024)
				WRITE #3,BR,BO;B?
				IF LOC>MEMORY_HI
					MEMORY_HI=V
				ELSE IF LOC<MEMORY_LO
					MEMORY_LO=LOC
				END IF
				LOC=LOC+1
			END IF
		END IF
	END IF
ELSE
	IF RP$=""
		PRINT "NO TABLE SETUP FOR THIS [H DATA IN LINE ";LN
		ER=1
	ELSE
 	 	DO
      P=POS(LNE$,=",")
			S=P
 	 		IF P=0
 	 			L$=LNE$
 	 		ELSE
 	 			L$=LNE$[1,P-1]
 	 			LNE$=LNE$[P+1]
 	 		END IF
 	 		P=POS(LABEL$,=L$)
 	 		IF P=0
 	 			PRINT "ROUTINE \42\";L$;"\42\ NOT FOUND IN LINE ";LN
 	 			ER=1
 	 		ELSE
 	 			V$=LABEL$[P-2,P-1]
 	 			CALL HEX_DEC()
 				CONV 1,B?,V
 				BR=INT(LOC/1024)
 				BO=LOC-(BR*1024)
 				WRITE #3,BR,BO;B?
 				IF LOC>MEMORY_HI
 	 					MEMORY_HI=LOC
 				ELSE IF LOC<MEMORY_LO
	 					MEMORY_LO=LOC
 				END IF
				LOC=LOC+1
 	 		END IF
 	 	LOOP UNTIL ER=1 OR S=0
	END IF
END IF
END SUB


SUB ROUTINE_LABEL()
MC$=""
P=POS(LNE$,=" ")
IF P>0                 \!MC INLINE WITH ROUTINE LABEL
	MC$=LTRIM$(UCASE$(LNE$[P]))
	V$=LNE$[1,P-1]
ELSE
	V$=LNE$              \!ROUTINE LABEL ONLY
END IF
CALL FIND_LABEL()
IF ER=0
	V=MEM
	CALL DEC_HEX()
	LABEL$[P-5,P-1]="A"+V$[1,4]
END IF
IF MC$<>""
	CALL POSSIBLE_MC()
END IF
END SUB

SUB POSSIBLE_MC()
REM
P=POS(MN$,=MC$[1,3])   \!FIRST: CHECK MNEMONIC EXISTS
IF P=0
	PRINT "MNEMONIC NOT RECOGNISED IN LINE ";LN
	ER=1
ELSE                   \!THEN WORK OUT ADDRESSING MODE
	RP$="BEQBNEBCCBCSBMIBPLBVCBVS"
	IF LEN(RTRIM$(MC$))=3
		CALL IS_IMPLIED()                \!AM1/AM2
	ELSE IF POS(RP$,=MC$[1,3])
		CALL IS_RELATIVE()                 \!AM12        BEQ LOOP
	ELSE IF POS(MC$,=",X)")
		CALL IS_INDIRECTX()              \!AM8         (00,X)
	ELSE IF POS(MC$,="),Y")
		CALL IS_INDIRECTY()              \!AM9         (00),Y
	ELSE IF POS(MC$,=",X")
		CALL IS_ADDRX()                  \!AM10/AM6    00,X OR BFE0,X
	ELSE IF POS(MC$,=",Y")
		CALL IS_ADDRY()                  \!AM11/AM7    00,Y OR BFE0,Y
	ELSE IF POS(MC$,=")")
		CALL IS_INDIRECT()               \!AM13        (BFE0)
	ELSE IF POS(MC$,="#")
		CALL IS_IMMEDIATE()              \!AM5         #VALUE
	ELSE
		CALL IS_ADDRESS()                \!AM3/AM4     00 OR BFE0
	END IF
END IF
END SUB

SUB IS_ADDRESS()
P=POS(LNE$,="+")
IF P>0
	AD=VAL(LNE$[P+1])
	LNE$=LNE$[1,P-1]
	P=POS(MC$,="+")
	MC$=MC$[1,P-1]
ELSE
	AD=0
END IF
RP$=LTRIM$(MC$[4])
IF LEN(RP$)=2         \!ZERO PAGE VALUE
	P=POS(MN$,=MC$[1,3]+"3")
	IF P=0
		PRINT "CANNOT USE THIS MODE WITH THIS MNEMONIC IN LINE ";LN
		ER=1
	ELSE
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V$=RP$
		CALL HEX_DEC()
		V=V+AD
		CALL POKE_VALUE()
	END IF
ELSE
	IF LEN(RP$)<5
		V$=RP$
		CALL HEX_DEC()
	END IF
	IF ER=1 OR LEN(RP$)>4     \!MUST BE LABEL
	  ER=0
		X=POS(LABEL$,=RP$)
		IF X=0
			V=MEM
			CALL DEC_HEX()
			LABEL$=LABEL$+"'"+V$[1,4]+RP$+"~"
			P=POS(MN$,=MC$[1,3]+"2")
			IF P=0
				PRINT "CANNOT USE ABSOLUTE MODE FOR THIS MNEMONIC IN LINE ";LN
				ER=1
			ELSE
  			V$=MN$[P+4,P+5]
				CALL HEX_DEC()
				CALL POKE_VALUE()
				V=0
				CALL POKE_VALUE()
				CALL POKE_VALUE()
			END IF
		ELSE
  		IF ASC(RP$[1,1])>64
  	  	V$=LABEL$[X-1,X-1]+RP$
	  		X=X-1
		  	RP$=V$
			END IF
			SELECT CASE LABEL$[X-5,X-5]
				CASE "-"
		  		V=MEM+1
					CALL DEC_HEX()
					RP$[1,1]=STR$(AD)
					LABEL$=LABEL$+"^"+V$[1,4]+RP$+"~"   !ABS/ZP LABEL NOT YET FOUND
					P=POS(MN$,=MC$[1,3]+"2")
					IF P=0
						PRINT "ADDRESSING MODE NOT FOR MNEMONIC IN LINE ";LN
						ER=1
					ELSE
						V$=MN$[P+4,P+5]
						CALL HEX_DEC()
						CALL POKE_VALUE()
						V=0
						CALL POKE_VALUE()
						V=0
						CALL POKE_VALUE()
					END IF
			  CASE "A"
					P=POS(MN$,=MC$[1,3]+"2")
					IF P=0
						PRINT "ADDRESSING MODE NOT FOR MNEMONIC IN LINE ";LN
						ER=1
					ELSE
						V$=MN$[P+4,P+5]
						CALL HEX_DEC()
						CALL POKE_VALUE()
						V$=LABEL$[X-4,X-1]
						CALL HEX_DEC()
						V=V+AD
						CALL DEC_HEX()
						V$[1,2]=""
						CALL HEX_DEC()
						CALL POKE_VALUE()
						V$=LABEL$[X-4,X-1]
						CALL HEX_DEC()
						V=V+AD
						CALL DEC_HEX()
						V$[3]=""
						CALL HEX_DEC()
						CALL POKE_VALUE()
					END IF
				CASE ELSE
					P=POS(MN$,=MC$[1,3]+"3")
					IF P=0
						PRINT "ADDRESSING MODE NOT FOR MNEMONIC IN LINE ";LN
					ELSE
						V$=MN$[P+4,P+5]
						CALL HEX_DEC()
						CALL POKE_VALUE()
						V$=LABEL$[X-2,X-1]
						CALL HEX_DEC()
						V=V+AD
						CALL POKE_VALUE()
					END IF
			END SELECT
		END IF
  ELSE              \!MUST BE ABSOLUTE VALUE
		IF LEN(RP$)=3
			Z$="0"+RP$
			RP$=Z$
		END IF
    P=POS(MN$,=MC$[1,3]+"2")
		IF P=0
			PRINT "CANNOT USE ABS ADDR. WITH THIS INSTRUCTION, LINE ";LN
			ER=1
		ELSE
 	 		V$=MN$[P+4,P+5]
 	 		CALL HEX_DEC()
 	 		CALL POKE_VALUE()
 	 		V$=RP$[1,4]
 	 		CALL HEX_DEC()
 	 		V=V+AD
 	 		CALL DEC_HEX()
 	 		RP$=V$
 	 		V$=RP$[3,4]
 	 		CALL HEX_DEC()
 	 		CALL POKE_VALUE()
 	 		V$=RP$[1,2]
 	 		CALL HEX_DEC()
 	 		CALL POKE_VALUE()
		END IF
	END IF
END IF
END SUB


SUB IS_IMPLIED()
P=POS(MN$,=MC$[1,3]+"1")
IF P=0
	PRINT "YOU CANNA IMPLY WITH THIS MNEMONIC!, LINE ";LN
	ER=1
ELSE
	V$=MN$[P+4,P+5]
	CALL HEX_DEC()
	CALL POKE_VALUE()
END IF
END SUB


SUB IS_IMMEDIATE()
P=POS(MC$,="#")
V$=LTRIM$(MC$[P+1])
SELECT CASE V$[1,1]
	CASE "&"
		PRINT "CANNOT, AS YET, DO THAT!!, LINE ";LN
		ER=1
	CASE "\42\" \!CHARACTER
		V=ASC(V$[2])
		IF V=126
			ES$=V$[3,6]
			CALL EVAL_SWITCH()
		END IF
	CASE "%"
		V$=V$[2]
		B=1
		V=0
		FOR P=LEN(V$) TO 1 STEP -1
			IF V$[P,P]="1"
				V=V+B
			END IF
			B=B*2
		NEXT P
	CASE "$"
		V=VAL(V$[2])
	CASE ELSE
		CALL HEX_DEC()
		IF ER=1
			PRINT "VALUE NOT FOUND IN LINE ";LN
		END IF
END SELECT
IF ER=0
	L=V
	P=POS(MN$,=MC$[1,3]+"4")
	IF P=0
		PRINT "CANNOT USE IMMIATE WITH THAT MNEMONIC AT LINE ";LN
		ER=1
	ELSE
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V=L
		CALL POKE_VALUE()
	END IF
END IF
END SUB


SUB IS_INDIRECT()
IF MC$[1,3]="JMP"
	RP$=LTRIM$(MC$[4])
	IF RP$[1,1]="("
		L=LEN(RP$)
		RP$=RP$[2,L-1]
		IF LEN(RP$)<5
			V$=RP$
			CALL HEX_DEC()
		END IF
    IF ER=1 OR LEN(RP$)>4             \! (&LABEL) MUST BE LABEL!
			ER=0
			P=POS(LABEL$,=RP$)
			IF P=0
				PRINT "CANNOT FIND LABEL IN LINE";LN
			ELSE
				IF ASC(RP$[1,1])>64
					Z$=LABEL$[P-1,P-1]+RP$
					P=P-1
					RP$=Z$
				END IF
				SELECT CASE LABEL$[P-5,P-5]
					CASE "-"
						ER=1
						PRINT "CANNOT FIND THE LABEL IN LINE ";LN
					CASE ELSE
						V=108
						CALL POKE_VALUE()
						V$=LABEL$[P-2,P-1]
						CALL HEX_DEC()
						CALL POKE_VALUE()
						V$=LABEL$[P-4,P-3]
						CALL HEX_DEC()
						CALL POKE_VALUE()
				END SELECT
			END IF
		ELSE            									\! (0000) MUST BE VALUE!
			IF LEN(RP$)<4
				DO
					Z$="0"+RP$
					RP$=Z$
				LOOP UNTIL LEN(RP$)=4
			END IF
			V=108
			CALL POKE_VALUE()
			V$=RP$[3,4]
			CALL HEX_DEC()
			CALL POKE_VALUE()
			V$=RP$[1,2]
			CALL HEX_DEC()
			CALL POKE_VALUE()
		END IF
	END IF
END IF
END SUB


SUB IS_ADDRY()
RP$=LTRIM$(MC$[4]) \ L=LEN(RP$)
RP$[L-1]=""
IF LEN(RP$)=2             \!00,X
	P=POS(MN$,=MC$[1,3]+"A")
	IF P=0
		PRINT"ZPAGE,Y CANNOT BE PERFORMED WITH THIS MNEMONIC, LINE ";LN
	ELSE
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V$=RP$
		CALL HEX_DEC()
		CALL POKE_VALUE()
	END IF
ELSE
	P=POS(LABEL$,=RP$)
	IF P=0
		IF LEN(V$)=3
			V$="0"+RP$
		ELSE
			V$=RP$
		END IF
		CALL HEX_DEC()
		IF ER=1
		  PRINT "LABEL NOT FOUND IN LINE ";LN
		ELSE
			V=POS(MN$,=MC$[1,3]+"6")
			IF V=0
				PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
			ELSE
				V$=MN$[V+4,V+5]
			  CALL HEX_DEC()
			  CALL POKE_VALUE()
				V$=RP$[3,4]
				CALL HEX_DEC()
				CALL POKE_VALUE()
			  V$=RP$[1,2]
				CALL HEX_DEC()
				CALL POKE_VALUE()
			END IF
		END IF
	ELSE                    \! MUST BE LABEL
		IF ASC(RP$[1,1])>64
			Z$=LABEL$[P-1,P-1]+RP$
			P=P-1
			RP$=Z$
		END IF
		SELECT CASE LABEL$[P-5,P-5]
      CASE "-"
				PRINT "MUST SPECIFY ZPAGE LOC BEFORE THIS POINT IN LINE ";LN
				ER=1
			CASE "A"
				V=POS(MN$,=MC$[1,3]+"6")
				IF V=0
					PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
				ELSE
					V$=MN$[V+4,V+5]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-2,P-1]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-4,P-3]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				END IF
			CASE ELSE
				V=POS(MN$,=MC$[1,3]+"A")
				IF V=0
					PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
					ER=1
				ELSE
					V$=MN$[V+4,V+5]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-2,P-1]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				END IF
		END SELECT
	END IF
END IF
END SUB


SUB IS_ADDRX()
RP$=LTRIM$(MC$[4]) \ L=LEN(RP$)
RP$[L-1]=""
IF LEN(RP$)=2             \!00,X
	P=POS(MN$,=MC$[1,3]+"9")
	IF P=0
		PRINT"ZPAGE,X CANNOT BE PERFORMED WITH THIS MNEMONIC, LINE ";LN
	ELSE
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V$=RP$
		CALL HEX_DEC()
		CALL POKE_VALUE()
	END IF
ELSE                      \! EITHER ABS VALUE OR ABS LABEL
	P=POS(LABEL$,=RP$)
	IF P=0                  \! MUST BE ABS VALUE
		IF LEN(V$)=3
			V$="0"+RP$
		ELSE
			V$=RP$
		END IF
		CALL HEX_DEC()
		IF ER=1
		  PRINT "LABEL NOT FOUND IN LINE ";LN
		ELSE
			V=POS(MN$,=MC$[1,3]+"5")
			IF V=0
				PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
			ELSE
				V$=MN$[V+4,V+5]
			  CALL HEX_DEC()
			  CALL POKE_VALUE()
				V$=RP$[3,4]
				CALL HEX_DEC()
				CALL POKE_VALUE()
			  V$=RP$[1,2]
				CALL HEX_DEC()
				CALL POKE_VALUE()
			END IF
		END IF
	ELSE                    \! MUST BE ABS LABEL
		IF ASC(RP$[1,1])>64
			Z$=LABEL$[P-1,P-1]+RP$
			P=P-1
			RP$=Z$
		END IF
		SELECT CASE LABEL$[P-5,P-5]
      CASE "-"
				PRINT "MUST SPECIFY LABEL BEFORE THIS POINT IN LINE ";LN
				ER=1
			CASE "A"
				V=POS(MN$,=MC$[1,3]+"5")
				IF V=0
					PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
				ELSE
					V$=MN$[V+4,V+5]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-2,P-1]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-4,P-3]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				END IF
			CASE ELSE
				V=POS(MN$,=MC$[1,3]+"9")
				IF V=0
					PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
					ER=1
				ELSE
					V$=MN$[V+4,V+5]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-2,P-1]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				END IF
		END SELECT
	END IF
END IF
END SUB

SUB IS_INDIRECTY()
RP$=LTRIM$(MC$[4]) \ L=LEN(RP$)-3
RP$=RP$[2,L]
IF LEN(RP$)=2             \!(00,X)
	V=POS(MN$,=MC$[1,3]+"8")
	IF V=0
		PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
		ER=1
	ELSE
		V$=MN$[V+4,V+5]
	  CALL HEX_DEC()
	  CALL POKE_VALUE()
	  V$=RP$
	  CALL HEX_DEC()
	  CALL POKE_VALUE()
	END IF
ELSE                      \! MUST BE LABEL THEN!
	P=POS(LABEL$,=RP$)
	IF P=0
		PRINT "LABEL NOT FOUND IN LINE ";LN
		ER=1
	ELSE
		IF ASC(RP$[1,1])>64
			Z$=LABEL$[P-1,P-1]+RP$
			P=P-1
			RP$=Z$
		END IF
		SELECT CASE LABEL$[P-5,P-5]
      CASE "-"
				PRINT "MUST SPECIFY ZPAGE LOC BEFORE THIS POINT IN LINE ";LN
				ER=1
			CASE "A"
				PRINT "CANNOT USE ABSOLUTE ADDRESSING IN LINE ";LN
				ER=1
			CASE ELSE
				V=POS(MN$,=MC$[1,3]+"8")
				IF V=0
					PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
					ER=1
				ELSE
					V$=MN$[V+4,V+5]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-4,P-1]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				END IF
		END SELECT
	END IF
END IF
END SUB

SUB IS_INDIRECTX()
RP$=LTRIM$(MC$[4]) \ L=LEN(RP$)-3
RP$=RP$[2,L]
IF LEN(RP$)=2             \!(00,X)
	V=POS(MN$,=MC$[1,3]+"7")
	IF V=0
		PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
		ER=1
	ELSE
		V$=MN$[V+4,V+5]
	  CALL HEX_DEC()
	  CALL POKE_VALUE()
	  V$=RP$
	  CALL HEX_DEC()
	  CALL POKE_VALUE()
	END IF
ELSE
	P=POS(LABEL$,=RP$)
	IF P=0
		PRINT "LABEL NOT FOUND IN LINE ";LN
		ER=1
	ELSE
		IF ASC(RP$[1,1])>64
			Z$=LABEL$[P-1,L+4]+RP$
			P=P-1
			RP$=Z$
		END IF
		SELECT CASE LABEL$[P-5,P-5]
      CASE "-"
				PRINT "MUST SPECIFY ZPAGE LOC BEFORE THIS POINT IN LINE ";LN
				ER=1
			CASE "A"
				PRINT "CANNOT USE ABSOLUTE ADDRESSING IN LINE ";LN
				ER=1
			CASE ELSE
				V=POS(MN$,=MC$[1,3]+"7")
				IF V=0
					PRINT "ADDRESSING MODE NOT SUPPORTED FOR THIS MNEMONIC IN LINE ";LN
					ER=1
				ELSE
					V$=MN$[V+4,V+5]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				  V$=LABEL$[P-4,P-1]
				  CALL HEX_DEC()
				  CALL POKE_VALUE()
				END IF
		END SELECT
	END IF
END IF
END SUB

SUB IS_RELATIVE()
RP$=LTRIM$(MC$[4])
SELECT CASE RP$[1,1]
	CASE "&"                \! &LABEL
		O=POS(LABEL$,=RP$)
		IF O=0
			PRINT "ROUTINE NOT FOUND IN LINE ";LN;" !!"
			ER=1
		ELSE
			IF LABEL$[O-5,O-5]="-"                     \!UNDEFINED (PROBABLY GO FORTH!)
				V=MEM+1                                  \!SO RESERVE FOR 3RD PASS
				CALL DEC_HEX()
				LABEL$=LABEL$+"/"+V$[1,4]+RP$+"~"
 				V$=MN$[P+4,P+5]
				CALL HEX_DEC()
				CALL POKE_VALUE()
				V=0
				CALL POKE_VALUE()
			ELSE IF LABEL$[O-5,O-5]="Z" AND MEM>384    \!ATTEMPT TO BRANCH TO ZERO PAGE
				PRINT "STEP TOO MASSIVE IN LINE ";LN
				ER=1
			ELSE IF LABEL$[O-5,O-5]="Z" AND MEM<384    \!BRANCH WITHIN ZERO_PAGE OK
				V$=LABEL$[O-2,O-1]
				CALL HEX_DEC()
				A=MEM-V
				IF ABS(A)>127                            \!BRANCH TOO GREAT
					PRINT "BRANCH TOO GREAT (";ABS(A);") IN LINE ";LN
					ER=1
				ELSE IF A=0
					PRINT "BRANCH CANNOT GO TO SAME LINE! IN LINE";LN
					ER=1
				ELSE IF A<0                              \!BRANCH FORTH
					B=ABS(A)
				ELSE IF A>0                              \!BRANCH BACK
					B=128-A
				END IF
				IF ER=0
  				V$=MN$[P+4,P+5]
					CALL HEX_DEC()
					CALL POKE_VALUE()
					V=B
					CALL POKE_VALUE()
				END IF
			ELSE
				V$=LABEL$[O-4,O-1]
				CALL HEX_DEC()
				A=MEM-V
				IF ABS(A)>127                            \!BRANCH TOO GREAT
					PRINT "BRANCH TOO GREAT IN LINE ";LN
					ER=1
				ELSE IF A=0
					PRINT "BRANCH CANNOT GO TO SAME LINE! IN LINE";LN
					ER=1
				ELSE IF A<0                              \!BRANCH BACK
					B=ABS(A)
				ELSE IF A>0                              \!BRANCH FORTH
					B=254-A
				END IF
				IF ER=0
  				V$=MN$[P+4,P+5]
					CALL HEX_DEC()
					CALL POKE_VALUE()
					V=B
					CALL POKE_VALUE()
				END IF
			END IF
		END IF
	CASE "+"                \! +04
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V=VAL(RP$[2])
		CALL POKE_VALUE()
	CASE "-"                \! -04
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V=127-VAL(RP$[2])
		CALL POKE_VALUE()
  CASE ELSE               \! 04
		V$=MN$[P+4,P+5]
		CALL HEX_DEC()
		CALL POKE_VALUE()
		V=VAL(RP$[1])
		CALL POKE_VALUE()
END SELECT
END SUB

SUB EVAL_VARIABLE() !THIS MAY RADICALLY CHANGE THE MEMORY DUMP RANGE
CALL TILL_CHANGE()
P=POS(LABEL$,=L$)
IF P>0
	IF LABEL$[P-5,P-5]="-"   \!GOT TO USE CURRENT MEM LOC
		V=MEM
		VL=MEM
		UM=1
		CALL DEC_HEX()
		LABEL$[P-4,P-1]=V$[1,4]
	ELSE
		V$=LABEL$[P-4,P-1]
		CALL HEX_DEC()
		VL=V
		UM=0
	END IF
	P=POS(LNE$,="(")
	IF P>0             \!DEFAULT VALUE FOUND
		L$=LNE$[P+1]
		P=POS(L$,=")")
		IF P>0
			V$=L$[1,P-1]
			SELECT CASE V$[1,1]
 	 	 	 	CASE "&"
 	 	 	 		PRINT "CANNOT, AS YET, DO THAT!!, LINE ";LN
 	 	 	 		ER=1
 	 	 	 	CASE "\42\" \!CHARACTER
 	 	 	 		V=ASC(V$[2])
					IF V=126
						ES$=V$[3]
						CALL EVAL_SWITCH()
					END IF
 	 	 	 	CASE "%"
 	 	 	 		V$=V$[2]
 	 	 	 		B=1
 	 	 	 		V=0
 	 	 	 		FOR P=LEN(V$) TO 1 STEP -1
 	 	 	 			IF V$[P,P]="1"
 	 	 	 				V=V+B
 	 	 	 			END IF
 	 	 	 			B=B*2
 	 	 	 		NEXT P
 	 	 	 	CASE "$"
 	 	 	 		V=VAL(V$[2])
 	 	 	 	CASE ELSE
 	 	 	 		CALL HEX_DEC()
 	 	 	 		IF ER=1
 	 	 	 			PRINT "VALUE NOT FOUND IN LINE ";LN
 	 	 	 		END IF
			END SELECT
			IF ER=0
				IF V>255
					PRINT "VALUE OUT OF RANGE IN LINE ";LN
					ER=1
				ELSE
					CONV 1,B?,V
					BR=INT(VL/1024)
					BO=VL-(BR*1024)
					WRITE #3,BR,BO;B?
					IF VL>MEMORY_HI
						MEMORY_HI=VL
					ELSE IF VL<MEMORY_LO
						MEMORY_LO=VL
					END IF
					IF UM=1
						MEM=MEM+1
						UM=0
					END IF
				END IF
			END IF
		ELSE
			PRINT "MUST ALWAYS CLOSE PARENTHESIS, LINE ";LN
			ER=1
		END IF
	END IF
ELSE
	PRINT "LABEL WASN'T FOUND IN FIRST PASS, LINE ";LN
	ER=1
END IF
END SUB

SUB MIXED_TABLE()
LNE$=LNE$[2,LEN(LNE$)-1]
O=1
DO
	P=POS(LNE$,=",")
	IF P=0
		V$=LNE$
		LNE$=""
	ELSE
		V$=LNE$[1,P-1]
		LNE$[1,P]=""
	END IF
	CALL ANY_BASE()
	CALL HEX_DEC()
	CALL POKE_VALUE()
LOOP UNTIL LNE$=""
END SUB

SUB COMPACT_TABLE()
LNE$=LNE$[2,LEN(LNE$)-1]
FOR A=1 TO LEN(LNE$) STEP 2
	V$=LNE$[A,A+1]
	CALL HEX_DEC()
	CALL POKE_VALUE()
NEXT A
END SUB

SUB ROUTINE_TABLE()
C=0
O=1
DO
  P=POS(LNE$,=",")
	IF P>0
		C=C+1
		LNE$=LNE$[P+1]
	END IF
LOOP UNTIL P=0
IF C=0
	C=1
ELSE
	C=C+1
END IF
V=0
FOR A=1 TO C
	CALL POKE_VALUE()
NEXT A
END SUB

SUB STRING_TABLE()
A=3
DO
	V=ASC(LNE$[A,A])
	IF V=126           !ALLOW FOR SWITCHES FOR SPECIAL CHARACTERS
		ES$=LNE$[A+1,A+4]
		CALL EVAL_SWITCH()
		A=A+5
	END IF
	CALL POKE_VALUE()
	A=A+1
LOOP UNTIL A>LEN(LNE$)-2
END SUB

SUB EVAL_SWITCH()
SELECT CASE ES$[1,4]
	CASE "APOS"
		V=39
	CASE "TILD"
		V=126
	CASE "QUOT"
		V=34
	CASE "POUN"
		V=95
	CASE "HASH"
		V=35
	CASE "PIPE"
		V=124
	CASE "COPY"
		V=96
	CASE "DELE"
		V=127
END SELECT
END SUB

SUB PADDED_TABLE()
P=POS(LNE$,="*L")              \!LOOK FOR PAD TO 00
IF P>0
	P=P+1
	RP$=LNE$[P+1,P+2]
	LNE$[P,P]=""
	V=MEM
	CALL DEC_HEX()
	IF V$[3,4]<>RP$[1,2]
		P=POS(LNE$,="*")
		IF P=0
			PRINT "NO * IN LINE ";LN;" OF SOURCE"
			ER=1
		ELSE
			V$=LNE$[3,P-1]
 	 		IF POS(HX$,=V$[1,1])
 	 			V$=LNE$[2,P-1]
 	 		END IF
			CALL ANY_BASE()
			CALL HEX_DEC()
			VL=V
 	 		DO
				V=VL
    		CALL POKE_VALUE()
				V=MEM
				CALL DEC_HEX()
 	 			WASTED=WASTED+1
 	 		LOOP UNTIL V$[3,4]=RP$[1,2]
		END IF
	END IF
ELSE
	P=POS(LNE$,="*")            \! NOW LOOK FOR MULTIPLIER
	IF P=0
		PRINT "NO * IN LINE ";LN;" OF SOURCE"
		ER=1
	ELSE
		V$=LNE$[3,P-1]
		IF POS(HX$,=V$[1,1])
			V$=LNE$[2,P-1]
		END IF
		CALL ANY_BASE()
		CALL HEX_DEC()
		PC=V
		V$=LNE$[P+1,LEN(LNE$)-1]
		IF POS(HX$,=V$[1,1])
			V$=LNE$[2,P-1]
		END IF
		CALL ANY_BASE()
		CALL HEX_DEC()
		SZ=V
		V=PC
		FOR A=1 TO SZ
			CALL POKE_VALUE()
		NEXT A
	END IF
END IF
END SUB

SUB POKE_VALUE()
IF V>255
	PRINT "VALUE OUT OF RANGE IN LINE ";LN
	ER=1
ELSE
	CONV 1,B?,V
	BR=INT(MEM/1024)
	BO=MEM-(BR*1024)
	WRITE #3,BR,BO;B?
	MEM=MEM+1
	IF MEM>MEMORY_HI
		MEMORY_HI=MEM
	END IF
END IF
END SUB


SUB FIND_LABEL()
P=POS(LABEL$,=V$)
IF P=0
	PRINT V$;" NOT FOUND IN SOURCE, LINE ";LN;" !!"
	ER=1
ELSE
	V$=LABEL$[P-5]
	U=POS(V$,="~")
	V$=V$[1,U]
END IF
END SUB


SUB ADD_KEY()
!LOOK FOR ADDRESS
IF L$[1,1]=";"
	P=POS(LNE$,="=")
	IF P>0
		X=POS(LNE$,="(")
		IF X>P
			V$=RTRIM$(LNE$[P+1,X-1])
		ELSE
			V$=LNE$[P+1]
		END IF
		IF LEN(V$)=2
			K$="Z"
		ELSE
			K$="A"
		END IF
	ELSE
		IF MEM>255
			K$="A"
		ELSE
			K$="Z"
		END IF
		V=MEM
		CALL DEC_HEX()
		MEM=MEM+1
 	 	IF MEM>MEMORY_HI
 	 		MEMORY_HI=MEM
 	 	END IF
	END IF
ELSE
	K$="-"
	V$="0000"
END IF
P=POS(LABEL$,=L$)
IF P=0
	LABEL$=LABEL$+K$+V$+UCASE$(L$)+"~"
END IF
END SUB




SUB STRIP_TABS()
DO
  P=POS(LNE$,="\11\")
	IF P>0
		LNE$[P,P]=" "
	END IF
LOOP UNTIL P=0
END SUB


SUB TILL_CHANGE()
LNE$=RTRIM$(LNE$)
P=POS(LNE$,=" ")
IF P>0
	L$=LNE$[1,P-1]
ELSE
	L$=LNE$
END IF
K$=L$
P=POS(K$,="=")
IF P>0
	L$=K$[1,P-1]
ELSE
	L$=K$
END IF
END SUB

SUB SETUP_CHANNELS()
FN$="C:\\DL4\\PROJECTS\\PROJECT"
TRY
	OPEN #1,FN$
	PRINT "OPENING PROJECT ROOT"
ELSE
  ER=1
	PRINT "COULD NOT LOAD PROJECT ROOT"
END TRY
END SUB

SUB RER()
PRINT RP$
PRINT "PRESS SPACE TO CONTINUE"
INPUT ""A$
END SUB

SUB STRIP_REMS()
DO
	P=POS(LNE$,="'",-1)
	K$=CHR$(34)+"'"+CHR$(34)
	IF P=1
		CLEAR LNE$
	ELSE IF P=0
		REM
	ELSE IF P>1 AND LNE$[P-1,P+1]<>K$     \!STILL ALLOW APOSTRAPHE IN QUOTES
		LNE$=RTRIM$(LNE$[1,P-1])            \!STRIP REMS AND ANY LEADING SPACES
	END IF
LOOP UNTIL P=0
END SUB


SUB ANY_BASE()
V$=LTRIM$(RTRIM$(V$))
SELECT CASE V$[1,1]
	CASE "%"
		V$=V$[2]
		B=1
		V=0
		FOR P=LEN(V$) TO 1 STEP -1
			IF V$[P,P]="1"
				V=V+B
			END IF
			B=B*2
		NEXT P
		CALL DEC_HEX()
	CASE "$"
		V=VAL(V$[2])
		CALL DEC_HEX()
	CASE "\42\"
		V=ASC(V$[2])
		IF V=126
			ES$=V$[3]
			CALL EVAL_SWITCH()
		END IF
		CALL DEC_HEX()
	CASE "#"
		V$=V$[2]
END SELECT
END SUB


SUB DEC_HEX()
CLEAR V$
IF V>4095
	V$=V$+HX$[INT(V/4096)+1,INT(V/4096)+1]
	V=V-(INT(V/4096)*4096)
ELSE IF V>255
	V$=V$+"0"
END IF
IF V>255
	V$=V$+HX$[INT(V/256)+1,INT(V/256)+1]
	V=V-(INT(V/256)*256)
ELSE
	V$=V$+"0"
END IF
IF V>15
	V$=V$+HX$[INT(V/16)+1,INT(V/16)+1]
	V=V-(INT(V/16)*16)
ELSE
	V$=V$+"0"
END IF
V$=V$+HX$[V+1,V+1]
IF LEN(V$)=1
	DH$="0"+V$
	V$=DH$[1,2]
ELSE IF LEN(V$)=3
	DH$="0"+V$
	V$=DH$[1,4]
END IF
END SUB

SUB HEX_DEC()
V=0
HM=1
HP=LEN(V$)
DO
  HO=POS(HX$,=V$[HP,HP])
	IF HO=0
    ER=1
		PRINT "H>D!";
	ELSE
    V=V+((HO-1)*HM)
    HM=HM*16
	END IF
  HP=HP-1
LOOP UNTIL HP=0 OR ER=1
V$=STR$(V)
END SUB

SUB SETUP_MNEMONICS()
mn$=""
mn$=mn$+":ADC26D43ADC36532ADC46922ADC57D43ADC67943ADC7??62ADC87152ADC97542"
mn$=mn$+":AND22D43AND32532AND42922AND53D43AND63943AND7??62AND83152AND93542"
mn$=mn$+":ASL10A21ASL20E63ASL30652ASL51E73ASL91662:BCCB9022:BCSBB022:BEQBF"
mn$=mn$+"022:BIT22C43BIT32432:BMIB3022:BNEBD022:BPLB1022:BRK10071:BVCB5022"
mn$=mn$+":BVSB7022:CLC11821:CLD1D821:CLI15821:CLV1B821:CMP2CD43CMP3C532CMP"
mn$=mn$+"4C922CMP5DD43CMP6D943CMP7C162CMP8D152CMP9D542:CPX2EC43CPX3E432CPX"
mn$=mn$+"4E022:CPY2CC43CPY3C432CPY4C022:DEC2CE63DEC3C652DEC5DE73DEC9D662:D"
mn$=mn$+"EX1CA21:DEY18821:EOR24D43EOR34532EOR44922EOR55D43EOR65943EOR74162"
mn$=mn$+"EOR85152EOR95542:INC2EE63INC3E652INC5FE73INC9F662:INX1E821:INY1C8"
mn$=mn$+"21:JMP24C33JMPB6C53:LDA2AD43LDA3A532LDA4A922LDA5BD43LDA6B943LDA7A"
mn$=mn$+"162LDA8B152LDA9B542:LDX2AE43LDX3A632LDX4A222LDX6BE43LDXAB642:LDY2"
mn$=mn$+"AC43LDY3A432LDY4A022LDY5BC43LDY9B442:LSR14A21LSR24E63LSR34652LSR5" !LSR ZPAGE WAS WRONG
mn$=mn$+"5E73LSR95662:NOP1EA21:ORA20D43ORA30532ORA40922ORA51D43ORA61943ORA"
mn$=mn$+"70162ORA81152ORA91542:PHA14831:PHP10831:PLA16841:PLP12841:ROL12A2"
mn$=mn$+"1ROL22E63ROL32652ROL53E73ROL93662:ROR16A21ROR26E63ROR36652ROR57E7"
mn$=mn$+"3ROR97662:RTI14061:RTS16061:SBC2ED43SBC3E532SBC4E922SBC5FD43SBC6F"
mn$=mn$+"943SBC7E162SBC8F152SBC9F542:SEC13821:SED1F821:SEI17821:STA28D43ST"
mn$=mn$+"A38522STA59D53STA69953STA78162STA89162STA99542:STX28E43STX38622ST"
mn$=mn$+"XA9642:STY28C43STY38422STY99442:TAX1AA21:TAY1A821:TSX1BA21:TXA18A"
mn$=mn$+"21:TXS19A21:TYA19821:KIL12201JSR22063"
END SUB
